package learn_go

import (
	"fmt"
	"testing"
)

//请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
//
//数字 1-9 在每一行只能出现一次。
//数字 1-9 在每一列只能出现一次。
//数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
//
//
//注意：
//
//一个有效的数独（部分已被填充）不一定是可解的。
//只需要根据以上规则，验证已经填入的数字是否有效即可。
//空白格用 '.' 表示。

func Test36(T *testing.T) {

	//fmt.Println(f36([][]string{{"5", "3", ".", ".", "7", ".", ".", ".", "."}, {"6", ".", ".", "1", "9", "5", ".", ".", "."}, {".", "9", "8", ".", ".", ".", ".", "6", "."}, {"8", ".", ".", ".", "6", ".", ".", ".", "3"}, {"4", ".", ".", "8", ".", "3", ".", ".", "1"}, {"7", ".", ".", ".", "2", ".", ".", ".", "6"}, {".", "6", ".", ".", ".", ".", "2", "8", "."}, {".", ".", ".", "4", "1", "9", ".", ".", "5"}, {".", ".", ".", ".", "8", ".", ".", "7", "9"}}))
	//fmt.Println(f36([][]string{
	//	{".", "8", "7", "6", "5", "4", "3", "2", "1"},
	//	{"2", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"3", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"4", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"5", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"6", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"7", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"8", ".", ".", ".", ".", ".", ".", ".", "."},
	//	{"9", ".", ".", ".", ".", ".", ".", ".", "."}}))
	//fmt.Println(f36([][]string{
	//	{"8", "3", ".", ".", "7", ".", ".", ".", "."},
	//	{"6", ".", ".", "1", "9", "5", ".", ".", "."},
	//	{".", "9", "8", ".", ".", ".", ".", "6", "."},
	//	{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
	//	{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
	//	{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
	//	{".", "6", ".", ".", ".", ".", "2", "8", "."},
	//	{".", ".", ".", "4", "1", "9", ".", ".", "5"},
	//	{".", ".", ".", ".", "8", ".", ".", "7", "9"}}))
	//
	fmt.Println(f36([][]string{

		{".", ".", ".", ".", "5", ".", ".", "1", "."},
		{".", "4", ".", "3", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", "3", ".", ".", "1"},
		{"8", ".", ".", ".", ".", ".", ".", "2", "."},
		{".", ".", "2", ".", "7", ".", ".", ".", "."},
		{".", "1", "5", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", "2", ".", ".", "."},
		{".", "2", ".", "9", ".", ".", ".", ".", "."},
		{".", ".", "4", ".", ".", ".", ".", ".", "."}},
	))
}

func f36(board [][]string) bool {
	h := make(map[string]struct{}, 9)
	l := make(map[string]struct{}, 9)
	for i := 0; i < 9; i++ {
		h = make(map[string]struct{}, 9)
		l = make(map[string]struct{}, 9)
		for j := 0; j < 9; j++ {

			if board[i][j] != "." {
				if _, ok := h[board[i][j]]; ok {
					return false
				} else {
					h[board[i][j]] = struct{}{}
				}
			}

			if board[j][i] != "." {
				if _, ok := l[board[j][i]]; ok {
					return false
				} else {
					l[board[j][i]] = struct{}{}
				}
			}

			if (j+1)%3 == 0 && (i+1)%3 == 0 {
				if !f36V(board, i-1, j-1) {
					return false
				}
			}

		}

	}
	return true
}

func f36V(board [][]string, i, j int) bool {
	flag := make(map[string]struct{}, 9)
	for k := i - 1; k <= i+1; k++ {
		for f := j - 1; f <= j+1; f++ {
			if board[k][f] != "." {
				if _, ok := flag[board[k][f]]; ok {
					return false
				} else {
					flag[board[k][f]] = struct{}{}
				}
			}
		}
	}
	return true
}
